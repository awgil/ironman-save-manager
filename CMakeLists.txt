cmake_minimum_required(VERSION 3.16)
project(ironman-save-manager CXX)

# Organize projects into folders inside solution
#set_property(GLOBAL PROPERTY USE_FOLDERS ON)

# Find third-party libraries
set(CMAKE_PREFIX_PATH ${CMAKE_PREFIX_PATH} ${QT5_ROOT})
find_package(Qt5 COMPONENTS Core Gui Widgets Network)
#set_property(GLOBAL PROPERTY AUTOGEN_TARGETS_FOLDER "Autogenerated")

# MOC generates stuff in intermediate directory, so make it visible
#set(CMAKE_INCLUDE_CURRENT_DIR ON)

# Run MOC automatically
set(CMAKE_AUTOMOC ON)
#set(CMAKE_AUTOUIC ON)
#set(CMAKE_AUTORCC ON)

function(add_target TARGET_NAME TARGET_TYPE)
	cmake_parse_arguments(PARSE_ARGV 2 ARG "DEPLOY_QT" "CATEGORY" "DEPS_PUBLIC;DEPS_PRIVATE;DEPS_INTERFACE")

	# define new target
	if(TARGET_TYPE STREQUAL "DLL")
		add_library(${TARGET_NAME} SHARED)
	elseif(TARGET_TYPE STREQUAL "LIB")
		add_library(${TARGET_NAME} STATIC)
	elseif(TARGET_TYPE STREQUAL "EXE_GUI")
		add_executable(${TARGET_NAME} WIN32)
	elseif(TARGET_TYPE STREQUAL "EXE_CONSOLE")
		add_executable(${TARGET_NAME})
	else()
		message(FATAL_ERROR "Target ${TARGET_NAME} specified unsupported target type ${TARGET_TYPE}.")
	endif()

	# c++20 support
	set_property(TARGET ${TARGET_NAME} PROPERTY CXX_STANDARD 20)

	# make sure different dlls/exes use different compile PDBs, so that they can be compiled concurrently
	if(NOT TARGET_TYPE STREQUAL "LIB")
		set_target_properties(${TARGET_NAME} PROPERTIES COMPILE_PDB_NAME "vc-${TARGET_NAME}")
	endif()

	# add current directory to include path for this target and its dependencies
	target_include_directories(${TARGET_NAME} PUBLIC "${CMAKE_CURRENT_SOURCE_DIR}/src/${TARGET_NAME}")

	# set category, if desired
	if(ARG_CATEGORY)
		set_property(TARGET ${TARGET_NAME} PROPERTY FOLDER ${ARG_CATEGORY})
	endif()

	# gather sources
	file(GLOB_RECURSE TARGET_SOURCES RELATIVE "${CMAKE_CURRENT_SOURCE_DIR}" CONFIGURE_DEPENDS "src/${TARGET_NAME}/${TARGET_NAME}/*")

	# add filtered sources to target and assign IDE source groups
	target_sources(${TARGET_NAME} PRIVATE ${TARGET_SOURCES})
	source_group(TREE "${CMAKE_CURRENT_SOURCE_DIR}/src/${TARGET_NAME}/${TARGET_NAME}" PREFIX "Sources" FILES ${TARGET_SOURCES})

	# add dependencies
	target_link_libraries(${TARGET_NAME}
		PUBLIC    ${ARG_DEPS_PUBLIC}
		PRIVATE   ${ARG_DEPS_PRIVATE}
		INTERFACE ${ARG_DEPS_INTERFACE}
	)

	# deploy qt if needed
	if(ARG_DEPLOY_QT)
		add_custom_command(TARGET ${TARGET_NAME} POST_BUILD COMMAND "${QT5_ROOT}/bin/windeployqt" "$<TARGET_FILE:${TARGET_NAME}>")
	endif()
endfunction()

add_target(ism EXE_GUI
	DEPS_PRIVATE Qt5::Widgets
	DEPLOY_QT
)
